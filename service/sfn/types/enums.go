// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ExecutionStatus string

// Values returns all known values for ExecutionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionStatus) Values() []ExecutionStatus {
	return []ExecutionStatus{
		"RUNNING",
		"SUCCEEDED",
		"FAILED",
		"TIMED_OUT",
		"ABORTED",
	}
}

type HistoryEventType string

// Values returns all known values for HistoryEventType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (HistoryEventType) Values() []HistoryEventType {
	return []HistoryEventType{
		"ActivityFailed",
		"ActivityScheduled",
		"ActivityScheduleFailed",
		"ActivityStarted",
		"ActivitySucceeded",
		"ActivityTimedOut",
		"ChoiceStateEntered",
		"ChoiceStateExited",
		"ExecutionAborted",
		"ExecutionFailed",
		"ExecutionStarted",
		"ExecutionSucceeded",
		"ExecutionTimedOut",
		"FailStateEntered",
		"LambdaFunctionFailed",
		"LambdaFunctionScheduled",
		"LambdaFunctionScheduleFailed",
		"LambdaFunctionStarted",
		"LambdaFunctionStartFailed",
		"LambdaFunctionSucceeded",
		"LambdaFunctionTimedOut",
		"MapIterationAborted",
		"MapIterationFailed",
		"MapIterationStarted",
		"MapIterationSucceeded",
		"MapStateAborted",
		"MapStateEntered",
		"MapStateExited",
		"MapStateFailed",
		"MapStateStarted",
		"MapStateSucceeded",
		"ParallelStateAborted",
		"ParallelStateEntered",
		"ParallelStateExited",
		"ParallelStateFailed",
		"ParallelStateStarted",
		"ParallelStateSucceeded",
		"PassStateEntered",
		"PassStateExited",
		"SucceedStateEntered",
		"SucceedStateExited",
		"TaskFailed",
		"TaskScheduled",
		"TaskStarted",
		"TaskStartFailed",
		"TaskStateAborted",
		"TaskStateEntered",
		"TaskStateExited",
		"TaskSubmitFailed",
		"TaskSubmitted",
		"TaskSucceeded",
		"TaskTimedOut",
		"WaitStateAborted",
		"WaitStateEntered",
		"WaitStateExited",
	}
}

type LogLevel string

// Values returns all known values for LogLevel. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (LogLevel) Values() []LogLevel {
	return []LogLevel{
		"ALL",
		"ERROR",
		"FATAL",
		"OFF",
	}
}

type StateMachineStatus string

// Values returns all known values for StateMachineStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StateMachineStatus) Values() []StateMachineStatus {
	return []StateMachineStatus{
		"ACTIVE",
		"DELETING",
	}
}

type StateMachineType string

// Values returns all known values for StateMachineType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StateMachineType) Values() []StateMachineType {
	return []StateMachineType{
		"STANDARD",
		"EXPRESS",
	}
}

type SyncExecutionStatus string

// Values returns all known values for SyncExecutionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SyncExecutionStatus) Values() []SyncExecutionStatus {
	return []SyncExecutionStatus{
		"SUCCEEDED",
		"FAILED",
		"TIMED_OUT",
	}
}
